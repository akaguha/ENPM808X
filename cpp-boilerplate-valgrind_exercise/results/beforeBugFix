akash@akash-Inspiron-7577:~/ENPM808X/cpp-boilerplate-valgrind_exercise/build/app$ valgrind ./shell-app 
==8634== Memcheck, a memory error detector
==8634== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==8634== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==8634== Command: ./shell-app
==8634== 
Averaged sensor reading: 10
==8634== Conditional jump or move depends on uninitialised value(s)
==8634==    at 0x401DC7: main (main.cpp:9)
==8634== 
==8634== 
==8634== HEAP SUMMARY:
==8634==     in use at exit: 72,748 bytes in 3 blocks
==8634==   total heap usage: 4 allocs, 1 frees, 73,772 bytes allocated
==8634== 
==8634== LEAK SUMMARY:
==8634==    definitely lost: 24 bytes in 1 blocks
==8634==    indirectly lost: 20 bytes in 1 blocks
==8634==      possibly lost: 0 bytes in 0 blocks
==8634==    still reachable: 72,704 bytes in 1 blocks
==8634==         suppressed: 0 bytes in 0 blocks
==8634== Rerun with --leak-check=full to see details of leaked memory
==8634== 
==8634== For counts of detected and suppressed errors, rerun with: -v
==8634== Use --track-origins=yes to see where uninitialised values come from
==8634== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
akash@akash-Inspiron-7577:~/ENPM808X/cpp-boilerplate-valgrind_exercise/build/app$ valgrind --leak-check=full ./shell-app 
==8645== Memcheck, a memory error detector
==8645== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==8645== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==8645== Command: ./shell-app
==8645== 
Averaged sensor reading: 10
==8645== Conditional jump or move depends on uninitialised value(s)
==8645==    at 0x401DC7: main (main.cpp:9)
==8645== 
==8645== 
==8645== HEAP SUMMARY:
==8645==     in use at exit: 72,748 bytes in 3 blocks
==8645==   total heap usage: 4 allocs, 1 frees, 73,772 bytes allocated
==8645== 
==8645== 44 (24 direct, 20 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 3
==8645==    at 0x4C2E0EF: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==8645==    by 0x401EEA: AnalogSensor::Read() (AnalogSensor.cpp:16)
==8645==    by 0x401D9A: main (main.cpp:7)
==8645== 
==8645== LEAK SUMMARY:
==8645==    definitely lost: 24 bytes in 1 blocks
==8645==    indirectly lost: 20 bytes in 1 blocks
==8645==      possibly lost: 0 bytes in 0 blocks
==8645==    still reachable: 72,704 bytes in 1 blocks
==8645==         suppressed: 0 bytes in 0 blocks
==8645== Reachable blocks (those to which a pointer was found) are not shown.
==8645== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8645== 
==8645== For counts of detected and suppressed errors, rerun with: -v
==8645== Use --track-origins=yes to see where uninitialised values come from
==8645== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
akash@akash-Inspiron-7577:~/ENPM808X/cpp-boilerplate-valgrind_exercise/build/app$ valgrind --track-origins=yes ./shell-app 
==8651== Memcheck, a memory error detector
==8651== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==8651== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==8651== Command: ./shell-app
==8651== 
Averaged sensor reading: 10
==8651== Conditional jump or move depends on uninitialised value(s)
==8651==    at 0x401DC7: main (main.cpp:9)
==8651==  Uninitialised value was created by a stack allocation
==8651==    at 0x401D66: main (main.cpp:5)
==8651== 
==8651== 
==8651== HEAP SUMMARY:
==8651==     in use at exit: 72,748 bytes in 3 blocks
==8651==   total heap usage: 4 allocs, 1 frees, 73,772 bytes allocated
==8651== 
==8651== LEAK SUMMARY:
==8651==    definitely lost: 24 bytes in 1 blocks
==8651==    indirectly lost: 20 bytes in 1 blocks
==8651==      possibly lost: 0 bytes in 0 blocks
==8651==    still reachable: 72,704 bytes in 1 blocks
==8651==         suppressed: 0 bytes in 0 blocks
==8651== Rerun with --leak-check=full to see details of leaked memory
==8651== 
==8651== For counts of detected and suppressed errors, rerun with: -v
==8651== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
akash@akash-Inspiron-7577:~/ENPM808X/cpp-boilerplate-valgrind_exercise/build/app$ valgrind --tool=callgrind ./shell-app 
==8673== Callgrind, a call-graph generating cache profiler
==8673== Copyright (C) 2002-2015, and GNU GPL'd, by Josef Weidendorfer et al.
==8673== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==8673== Command: ./shell-app
==8673== 
==8673== For interactive control, run 'callgrind_control -h'.
Averaged sensor reading: 10
==8673== 
==8673== Events    : Ir
==8673== Collected : 2199164
==8673== 
==8673== I   refs:      2,199,164
akash@akash-Inspiron-7577:~/ENPM808X/cpp-boilerplate-valgrind_exercise/build/app$ valgrind --tool=helgrind ./shell-app 
==8681== Helgrind, a thread error detector
==8681== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==8681== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==8681== Command: ./shell-app
==8681== 
Averaged sensor reading: 10
==8681== 
==8681== For counts of detected and suppressed errors, rerun with: -v
==8681== Use --history-level=approx or =none to gain increased speed, at
==8681== the cost of reduced accuracy of conflicting-access information
==8681== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

